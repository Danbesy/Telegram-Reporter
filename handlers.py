
#   ____                        _____                    _                          
#  |  _ \               ____   |  __ \                  | |                         
#  | |_) |  _   _      / __ \  | |  | |   __ _   _ __   | |__     ___   ___   _   _ 
#  |  _ <  | | | |    / / _` | | |  | |  / _` | | '_ \  | '_ \   / _ \ / __| | | | |
#  | |_) | | |_| |   | | (_| | | |__| | | (_| | | | | | | |_) | |  __/ \__ \ | |_| |
#  |____/   \__, |    \ \__,_| |_____/   \__,_| |_| |_| |_.__/   \___| |___/  \__, |
#            __/ |     \____/                                                  __/ |
#           |___/                                                             |___/ 
#
# Telegram - https://t.me/danbesy
# Telegram Channel - https://t.me/Danbesy_Dev
# Telegram Bio - https://Danbesy_Bio
# GitHub - https://github.com/Danbesy

import logging
import asyncio
import time
import uuid
import keyboards as kb
from config import *
from db import *
from datetime import datetime
from aiogram import Bot, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiosmtplib import SMTP
from aiocryptopay import AioCryptoPay, Networks
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ // Bot settings
bot = Bot(TOKEN)

router = Router()

# –ò–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—è CryptoPay // Initialization of CryptoPay
acp = AioCryptoPay(token=CRYPTOPAY_TOKEN, network=Networks.MAIN_NET)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ // # Logging
logging.basicConfig(level=logging.INFO)

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):

    await state.clear()

    await init_users_db()
    await init_logs_payments_db()

    user_id = message.from_user.id
    user_link = f'tg://user?id={user_id}'

    user_language = await get_user_language(user_id)

    if user_language == "ru":
        if user_id in ADMINS:
            await message.answer(
                f"<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, </b><a href='{user_link}'>{message.from_user.full_name}</a> !\n\n"
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± –≤ Telegram! üöÄ</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. üíº</b>",
                parse_mode="HTML",
                reply_markup=kb.main_admin)  
        else:
            await message.answer(
                f"<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, </b><a href='{user_link}'>{message.from_user.full_name}</a> !\n\n"
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± –≤ Telegram! üöÄ</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. üíº</b>",
                parse_mode="HTML",
                reply_markup=kb.main)

    elif user_language == "en":
        if user_id in ADMINS:
            await message.answer(
                f"<b>üëã Hello, </b><a href='{user_link}'>{message.from_user.full_name}</a> !\n\n"
                "<b>Welcome to the bot for automatic complaint submissions in Telegram! üöÄ</b>\n\n"
                "<b>Use the buttons below to get started. üíº</b>",
                parse_mode="HTML",
                reply_markup=kb.main_admin_en)
        else:
            await message.answer(
                f"<b>üëã Hello, </b><a href='{user_link}'>{message.from_user.full_name}</a> !\n\n"
                "<b>Welcome to the bot for automatic complaint submissions in Telegram! üöÄ</b>\n\n"
                "<b>Use the buttons below to get started. üíº</b>",
                parse_mode="HTML",
                reply_markup=kb.main_en)

    if not await user_exists(user_id):
        registration_date = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        await add_user(user_id, registration_date)

@router.callback_query(F.data == "menu")
async def menu(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    await state.clear()

    user_id = callback.from_user.id
    user_link = f'tg://user?id={user_id}'

    user_language = await get_user_language(user_id)

    if user_language == "ru":
        if user_id in ADMINS:
            await callback.message.answer(
                f"<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, </b><a href='{user_link}'>{callback.from_user.full_name}</a> !\n\n"
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± –≤ Telegram! üöÄ</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. üíº</b>",
                parse_mode="HTML",
                reply_markup=kb.main_admin)  
        else:
            await callback.message.answer(
                f"<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, </b><a href='{user_link}'>{callback.from_user.full_name}</a> !\n\n"
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± –≤ Telegram! üöÄ</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. üíº</b>",
                parse_mode="HTML",
                reply_markup=kb.main)

    elif user_language == "en":
        if user_id in ADMINS:
            await callback.message.answer(
                f"<b>üëã Hello, </b><a href='{user_link}'>{callback.from_user.full_name}</a>!\n\n"
                "<b>Welcome to the bot for automatic complaint submissions in Telegram! üöÄ</b>\n\n"
                "<b>Use the buttons below to get started. üíº</b>",
                parse_mode="HTML",
                reply_markup=kb.main_admin_en)  
        else:
            await callback.message.answer(
                f"<b>üëã Hello, </b><a href='{user_link}'>{callback.from_user.full_name}</a>!\n\n"
                "<b>Welcome to the bot for automatic complaint submissions in Telegram! üöÄ</b>\n\n"
                "<b>Use the buttons below to get started. üíº</b>",
                parse_mode="HTML",
                reply_markup=kb.main_en)

class Mailing(StatesGroup):
    category = State()
    confirm = State()

class ReportUser(StatesGroup):
    username = State()
    telegram_id = State()
    chat_link = State()
    link_for_user = State()
    reasons = State()

@router.callback_query(F.data == "start")
async def start(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    user_id = callback.from_user.id

    subscription_datetime = await get_subscription_datetime(user_id)

    current_timestamp = int(time.time())

    if subscription_datetime > current_timestamp or user_id in ADMINS:

        user_language = await get_user_language(user_id)

        if user_language == "ru":

            await callback.answer()

            await callback.message.answer(
                "<b>üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±:</b>",
                parse_mode="HTML",
                reply_markup=kb.category)
            await state.set_state(Mailing.category)

        elif user_language == "en":

            await callback.answer()

            await callback.message.answer(
                "<b>üìÇ Choose the necessary category to file complaints:</b>",
                parse_mode="HTML",
                reply_markup=kb.category_en)
            await state.set_state(Mailing.category)
    else:
        await callback.answer()

        await callback.message.answer(
            "<b>‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n\n"
            "<b>–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.</b>",
            parse_mode="HTML",
            reply_markup=kb.subscription_buy)

@router.message(Command("language"))
async def change_language(message: Message):
    user_id = message.from_user.id

    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await message.answer(
            "<b>üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:</b>",
            parse_mode="HTML",
            reply_markup=kb.change_language_ru)
    elif user_language == "en":
        await message.answer(
            "<b>üåê Select a language to use the bot:</b>",
            parse_mode="HTML",
            reply_markup=kb.change_language_en)

@router.callback_query(F.data == "select_language_ru")
async def set_language_ru(callback: CallbackQuery):

    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞! üá∑üá∫")

    user_id = callback.from_user.id

    await select_language_ru(user_id)

@router.callback_query(F.data == "select_language_en")
async def set_language_en(callback: CallbackQuery):

    await callback.answer("You have successfully selected English to use the bot! üá∫üá∏")

    user_id = callback.from_user.id

    await select_language_en(user_id)

@router.callback_query(F.data == "report_user")
async def report_user(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üìù –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>",
            parse_mode="HTML",  
            reply_markup=kb.cancel)

        await state.set_state(ReportUser.username)

    elif user_language == "en":
        await callback.message.answer(
            "<b>üìù To get started, enter the user's Username:</b>",
            parse_mode="HTML",  
            reply_markup=kb.cancel_en)

        await state.set_state(ReportUser.username)

@router.message(ReportUser.username)
async def get_username(message: Message, state: FSMContext):

    username = message.text
    await state.update_data(username=username)

    user_id = message.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await message.answer(
            f"<b>üë§ –í–≤–µ–¥–µ–Ω–Ω—ã–π –í–∞–º–∏ Username:</b> <code>{username}</code>\n\n"
            "<b>üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram ID:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel)

        await state.set_state(ReportUser.telegram_id)

    elif user_language == "en":
        await message.answer(
            f"<b>üë§ The Username you entered:</b> <code>{username}</code>\n\n"
            "<b>üìù Now enter the Telegram ID:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel_en)

        await state.set_state(ReportUser.telegram_id)

@router.message(ReportUser.telegram_id)
async def get_telegram_id(message: Message, state: FSMContext):

    telegram_id = message.text
    await state.update_data(telegram_id=telegram_id)

    data = await state.get_data()
    username = data.get('username')

    user_id = message.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await message.answer(
            f"<b>üë§ Username:</b> <code>{username}</code>\n"
            f"<b>üÜî Telegram ID:</b> <code>{telegram_id}</code>\n\n"
            "<b>üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (@username) –∏–ª–∏ ID –Ω–∞ —á–∞—Ç —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel)

        await state.set_state(ReportUser.chat_link)

    elif user_language == "en":
        await message.answer(
            f"<b>üë§ Username:</b> <code>{username}</code>\n"
            f"<b>üÜî Telegram ID:</b> <code>{telegram_id}</code>\n\n"
            "<b>üîó Enter the link (@username) or ID of the chat with the violation:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel_en)

        await state.set_state(ReportUser.chat_link)

@router.message(ReportUser.chat_link)
async def get_chat_link(message: Message, state: FSMContext):

    chat_link = message.text
    await state.update_data(chat_link=chat_link)

    data = await state.get_data()
    username = data.get('username')
    telegram_id = data.get('telegram_id')

    user_id = message.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await message.answer(
            f"<b>üë§ Username:</b> <code>{username}</code>\n"
            f"<b>üÜî Telegram ID:</b> <code>{telegram_id}</code>\n"
            f"<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç:</b> <code>{chat_link}</code>\n\n"
            "<b>‚ö†Ô∏è –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel)

        await state.set_state(ReportUser.link_for_user)

    elif user_language == "en":
        await message.answer(
            f"<b>üë§ Username:</b> <code>{username}</code>\n"
            f"<b>üÜî Telegram ID:</b> <code>{telegram_id}</code>\n"
            f"<b>üîó Chat link:</b> <code>{chat_link}</code>\n\n"
            "<b>‚ö†Ô∏è Now provide the link to the violation:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel_en)

        await state.set_state(ReportUser.link_for_user)

@router.message(ReportUser.link_for_user)
async def get_link(message: Message, state: FSMContext):
    
    link_for_user = message.text
    await state.update_data(link_for_user=link_for_user)

    data = await state.get_data()

    username = data.get('username')
    telegram_id = data.get('telegram_id')
    chat_link = data.get('chat_link')

    user_id = message.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await message.answer(
            f"<b>üë§ Username:</b> <code>{username}</code>\n"
            f"<b>üÜî Telegram ID:</b> <code>{telegram_id}</code>\n"
            f"<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç:</b> <code>{chat_link}</code>\n"
            f"<b>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:</b> <code>{link_for_user}</code>\n\n"
            "<b>üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:</b>",
            parse_mode="HTML",
            reply_markup=kb.reasons_for_user)

        await state.set_state(ReportUser.reasons)

    elif user_language == "en":
        await message.answer(
            f"<b>üë§ Username:</b> <code>{username}</code>\n"
            f"<b>üÜî Telegram ID:</b> <code>{telegram_id}</code>\n"
            f"<b>üîó Chat link:</b> <code>{chat_link}</code>\n"
            f"<b>‚ö†Ô∏è Violation link:</b> <code>{link_for_user}</code>\n\n"
            "<b>üìã Choose the reason for the report:</b>",
            parse_mode="HTML",
            reply_markup=kb.reasons_for_user_en)

        await state.set_state(ReportUser.reasons)

@router.callback_query(ReportUser.reasons)
async def get_reason(callback: CallbackQuery, state: FSMContext):

    callback_data = callback.data
    reason = callback_data.split("|")[1]
    await state.update_data(reason=reason)

    data = await state.get_data()
    username = data.get('username')
    telegram_id = data.get('telegram_id')
    chat_link = data.get('chat_link')
    link_for_user = data.get('link_for_user')

    user_id = callback.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"<b>üë§ Username:</b> <code>{username}</code>\n"
            f"<b>üÜî Telegram ID:</b> <code>{telegram_id}</code>\n"
            f"<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç:</b> <code>{chat_link}</code>\n"
            f"<b>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:</b> <code>{link_for_user}</code>\n"
            f"<b>üìã –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã:</b> <code>{reason}</code>\n\n"
            "<b>‚û°Ô∏è –ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>",
            parse_mode="HTML",
            reply_markup=kb.confirm_mailing_yes_no)
        
        await state.set_state(Mailing.confirm)

    elif user_language == "en":
        await callback.message.answer(
            "<b>üîç Please check the entered information:</b>\n\n"
            f"<b>üë§ Username:</b> <code>{username}</code>\n"
            f"<b>üÜî Telegram ID:</b> <code>{telegram_id}</code>\n"
            f"<b>üîó Chat link:</b> <code>{chat_link}</code>\n"
            f"<b>‚ö†Ô∏è Violation link:</b> <code>{link_for_user}</code>\n"
            f"<b>üìã Reason for the report:</b> <code>{reason}</code>\n\n"
            "<b>‚û°Ô∏è Do you want to continue?</b>",
            parse_mode="HTML",
            reply_markup=kb.confirm_mailing_yes_no_en)
        
        await state.set_state(Mailing.confirm)

class ReportChannel(StatesGroup):
    channel = State()
    link_for_channel = State()
    reasons = State()

@router.callback_query(F.data == "report_channel")
async def report_channel(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    user_id = callback.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üìù –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (@username) –∏–ª–∏ –µ–≥–æ ID:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel)
        
        await state.set_state(ReportChannel.channel)

    elif user_language == "en":
        await callback.message.answer(
            "<b>üìù To get started, enter the channel's link (@username) or its ID:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel_en)
        
        await state.set_state(ReportChannel.channel)

@router.message(ReportChannel.channel)
async def get_channel(message: Message, state: FSMContext):

    channel = message.text  
    await state.update_data(channel=channel)

    user_id = message.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await message.answer(
            f"<b>üîó –í–≤–µ–¥–µ–Ω–Ω–∞—è –í–∞–º–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:</b> <code>{channel}</code>\n\n"
            "<b>‚ö†Ô∏è –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel)

        await state.set_state(ReportChannel.link_for_channel)

    elif user_language == "en":
        await message.answer(
            f"<b>üîó The channel link you entered:</b> <code>{channel}</code>\n\n"
            "<b>‚ö†Ô∏è Now please provide the violation link:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel_en)

        await state.set_state(ReportChannel.link_for_channel)

@router.message(ReportChannel.link_for_channel)
async def get_link(message: Message, state: FSMContext):

    link_for_channel = message.text
    await state.update_data(link_for_channel=link_for_channel)

    data = await state.get_data()

    channel = data.get('channel')

    user_id = message.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await message.answer(
            f"<b>üì¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:</b> <code>{channel}</code>\n"
            f"<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:</b> <code>{link_for_channel}</code>\n\n"
            "<b>‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:</b>",
            parse_mode="HTML",
            reply_markup=kb.reasons_for_channel)

        await state.set_state(ReportChannel.reasons)

    elif user_language == "en":
        await message.answer(
            f"<b>üì¢ Channel link:</b> <code>{channel}</code>\n"
            f"<b>üîó Violation link:</b> <code>{link_for_channel}</code>\n\n"
            "<b>‚ö†Ô∏è Choose the reason for the report:</b>",
            parse_mode="HTML",
            reply_markup=kb.reasons_for_channel_en)

        await state.set_state(ReportChannel.reasons)

@router.callback_query(ReportChannel.reasons)
async def get_reason(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    callback_data = callback.data
    reason = callback_data.split("|")[1]
    await state.update_data(reason=reason)

    data = await state.get_data()
    channel = data.get('channel')
    link_for_channel = data.get('link_for_channel')

    user_id = callback.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"<b>üì¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:</b> <code>{channel}</code>\n"
            f"<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:</b> <code>{link_for_channel}</code>\n"
            f"<b>‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã:</b> <code>{reason}</code>\n\n"
            "<b>‚û°Ô∏è –ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>",
            parse_mode="HTML",
            reply_markup=kb.confirm_mailing_yes_no)

        await state.set_state(Mailing.confirm)

    elif user_language == "en":
        await callback.message.answer(
            "<b>üîç Please review the information entered:</b>\n\n"
            f"<b>üì¢ Channel link:</b> <code>{channel}</code>\n"
            f"<b>üîó Violation link:</b> <code>{link_for_channel}</code>\n"
            f"<b>‚ö†Ô∏è Reason for the report:</b> <code>{reason}</code>\n\n"
            "<b>‚û°Ô∏è Would you like to continue?</b>",
            parse_mode="HTML",
            reply_markup=kb.confirm_mailing_yes_no_en)

        await state.set_state(Mailing.confirm)

class ReportBot(StatesGroup):
    username_bot = State()
    reasons = State()

@router.callback_query(F.data == "report_bot")
async def report_bot(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    user_id = callback.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üìù –í–≤–µ–¥–∏—Ç–µ Username –±–æ—Ç–∞:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel)

        await state.set_state(ReportBot.username_bot)

    elif user_language == "en":
        await callback.message.answer(
            "<b>üìù Enter the bot's Username:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel_en)

        await state.set_state(ReportBot.username_bot)

@router.message(ReportBot.username_bot)
async def get_username_bot(message: Message, state: FSMContext):

    username_bot = message.text
    await state.update_data(username_bot=username_bot)

    user_id = message.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await message.answer(
            f"<b>ü§ñ –í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ Username –±–æ—Ç–∞:</b> <code>{username_bot}</code>\n\n"
            "<b>‚ö†Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –∂–∞–ª–æ–±—ã:</b>",
            parse_mode="HTML",
            reply_markup=kb.reasons_for_bot)

        await state.set_state(ReportBot.reasons)

    elif user_language == "en":
        await message.answer(
            f"<b>ü§ñ The bot's Username you entered:</b> <code>{username_bot}</code>\n\n"
            "<b>‚ö†Ô∏è Now select the reason for the report:</b>",
            parse_mode="HTML",
            reply_markup=kb.reasons_for_bot_en)

        await state.set_state(ReportBot.reasons)

@router.callback_query(ReportBot.reasons)
async def get_reason(callback: CallbackQuery, state: FSMContext):

    callback_data = callback.data
    reason = callback_data.split("|")[1]
    await state.update_data(reason=reason)

    data = await state.get_data()
    username_bot = data.get('username_bot')

    user_id = callback.from_user.id
    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"<b>ü§ñ Username –±–æ—Ç–∞:</b> <code>{username_bot}</code>\n"
            f"<b>‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã:</b> <code>{reason}</code>\n\n"
            "<b>‚û°Ô∏è –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>",
            parse_mode="HTML",
            reply_markup=kb.confirm_mailing_yes_no)

        await state.set_state(Mailing.confirm)

    elif user_language == "en":
        await callback.message.answer(
            "<b>üîç Please verify the entered data:</b>\n\n"
            f"<b>ü§ñ Bot's Username:</b> <code>{username_bot}</code>\n"
            f"<b>‚ö†Ô∏è Reason for the report:</b> <code>{reason}</code>\n\n"
            "<b>‚û°Ô∏è Do you want to continue?</b>",
            parse_mode="HTML",
            reply_markup=kb.confirm_mailing_yes_no_en)

        await state.set_state(Mailing.confirm)

# –°–ø–∏—Å–æ–∫ –ø–æ—á—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ // Mailing list
mailing_list = [
    'sms@telegram.org',
    'dmca@telegram.org',
    'abuse@telegram.org',
    'sticker@telegram.org',
    'support@telegram.org'
]

# SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ // SMTP settings
DELAY = 5 # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö // Delay in seconds

@router.callback_query(F.data.startswith("confirm_mailing_"))
async def confirm_callback(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    data = await state.get_data()
    username = data.get('username')
    telegram_id = data.get('telegram_id')
    chat_link = data.get('chat_link')
    link_for_user = data.get('link_for_user')
    channel = data.get('channel')
    link_for_channel = data.get('link_for_channel')
    username_bot = data.get('username_bot')
    reason = data.get('reason')

    # –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ // Dictionary with texts for reports
    REPORT_TEXTS = {
    "spam_user": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –°–ü–ê–ú. –ï–≥–æ —é–∑–µ—Ä–Ω–µ–π–º - {username}, –µ–≥–æ –∞–π–¥–∏ - {telegram_id}, —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç - {chat_link}, —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - {link_for_user}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
    "personal_data_user": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —á—É–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏—Ö —Å–æ–≥–ª–∞—Å–∏—è. –ï–≥–æ —é–∑–µ—Ä–Ω–µ–π–º - {username}, –µ–≥–æ –∞–π–¥–∏ - {telegram_id}, —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç - {chat_link}, —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - {link_for_user}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∫–∞—É–Ω—Ç–∞.",
    "trolling_user": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã—Ç–æ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π –∏ —Å–ø–∞–º–∏—Ç –≤ —á–∞—Ç–∞—Ö. –ï–≥–æ —é–∑–µ—Ä–Ω–µ–π–º - {username}, –µ–≥–æ –∞–π–¥–∏ - {telegram_id}, —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç - {chat_link}, —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - {link_for_user}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∫–∞—É–Ω—Ç–∞.",
    "delete_sessions_user": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –Ø —Å–ª—É—á–∞–π–Ω–æ –ø–µ—Ä–µ—à–µ–ª –ø–æ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π —Å—Å—ã–ª–∫–µ –∏ —É—Ç–µ—Ä—è–ª –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. –ï–≥–æ —é–∑–µ—Ä–Ω–µ–π–º - {username}, –µ–≥–æ –∞–π–¥–∏ - {telegram_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –æ–±–Ω—É–ª–∏—Ç–µ —Å–µ—Å—Å–∏–∏",
    "premium_user": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram.! –ê–∫–∫–∞—É–Ω—Ç {username}, {telegram_id} –ø—Ä–∏–æ–±—Ä—ë–ª Premium –ø–æ–¥–ø–∏—Å–∫—É –≤ –≤–∞—à–µ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, —á—Ç–æ–±—ã —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ö–æ–¥–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram. –ü—Ä–æ—à—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—É—é –∂–∞–ª–æ–±—É –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã!",
    "virtual_number_user": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram! –ê–∫–∫–∞—É–Ω—Ç {username}, {telegram_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É–ø–ª–µ–Ω–Ω—ã–π –Ω–∞ —Å–∞–π—Ç–µ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤. –û—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –Ω–æ–º–µ—Ä—É –æ–Ω –Ω–µ –∏–º–µ–µ—Ç, –Ω–æ–º–µ—Ä –Ω–∏–∫–∞–∫ –∫ –Ω–µ–º—É –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–µ—Ä–∏—Ç–µ—Å—å —Å —ç—Ç–∏–º. –ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ!",
    "personal_data_channel": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∏–Ω–Ω—ã—Ö –ª—é–¥–µ–π. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - {channel}, –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - {link_for_channel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.",
    "flaying_channel": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –∂–µ—Å—Ç–æ–∫–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - {channel}, –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - {link_for_channel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.",
    "cp_channel": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—é —Å —É—á–∞—Å—Ç–∏–µ–º –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - {channel}, –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - {link_for_channel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.",
    "price_channel": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä Telegram. –•–æ—á—É –≤–∞–º –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–µ—Ç —É—Å–ª—É–≥–∏ –¥–æ–∫—Å–∏–Ω–≥–∞ –∏ —Å–≤–∞—Ç—Ç–∏–Ω–≥–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª: {channel} –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {link_for_channel} –ü—Ä–æ—Å—å–±–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.",
    "pornography_channel": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –Ω–∞—à–µ–ª –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - {channel}, –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - {link_for_channel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
    "violence_channel": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –Ω–∞—à–µ–ª –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–∞—Å–∏–ª–∏–µ –∏–ª–∏ –∂–µ—Å—Ç–æ–∫–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - {channel}, –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - {link_for_channel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
    "osint_bot": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –ª–∏—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ - {username_bot}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–µ—Ä–∏—Ç–µ—Å—å –∏ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.",

    "spam_user_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –°–ü–ê–ú. –ï–≥–æ —é–∑–µ—Ä–Ω–µ–π–º - {username}, –µ–≥–æ –∞–π–¥–∏ - {telegram_id}, —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç - {chat_link}, —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - {link_for_user}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
    "personal_data_user_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —á—É–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏—Ö —Å–æ–≥–ª–∞—Å–∏—è. –ï–≥–æ —é–∑–µ—Ä–Ω–µ–π–º - {username}, –µ–≥–æ –∞–π–¥–∏ - {telegram_id}, —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç - {chat_link}, —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - {link_for_user}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∫–∞—É–Ω—Ç–∞.",
    "trolling_user_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã—Ç–æ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π –∏ —Å–ø–∞–º–∏—Ç –≤ —á–∞—Ç–∞—Ö. –ï–≥–æ —é–∑–µ—Ä–Ω–µ–π–º - {username}, –µ–≥–æ –∞–π–¥–∏ - {telegram_id}, —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç - {chat_link}, —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - {link_for_user}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∫–∞—É–Ω—Ç–∞.",
    "delete_sessions_user_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –Ø —Å–ª—É—á–∞–π–Ω–æ –ø–µ—Ä–µ—à–µ–ª –ø–æ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π —Å—Å—ã–ª–∫–µ –∏ —É—Ç–µ—Ä—è–ª –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. –ï–≥–æ —é–∑–µ—Ä–Ω–µ–π–º - {username}, –µ–≥–æ –∞–π–¥–∏ - {telegram_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –æ–±–Ω—É–ª–∏—Ç–µ —Å–µ—Å—Å–∏–∏",
    "premium_user_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram.! –ê–∫–∫–∞—É–Ω—Ç {username}, {telegram_id} –ø—Ä–∏–æ–±—Ä—ë–ª Premium –ø–æ–¥–ø–∏—Å–∫—É –≤ –≤–∞—à–µ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, —á—Ç–æ–±—ã —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ö–æ–¥–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram. –ü—Ä–æ—à—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—É—é –∂–∞–ª–æ–±—É –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã!",
    "virtual_number_user_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram! –ê–∫–∫–∞—É–Ω—Ç {username}, {telegram_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É–ø–ª–µ–Ω–Ω—ã–π –Ω–∞ —Å–∞–π—Ç–µ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤. –û—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –Ω–æ–º–µ—Ä—É –æ–Ω –Ω–µ –∏–º–µ–µ—Ç, –Ω–æ–º–µ—Ä –Ω–∏–∫–∞–∫ –∫ –Ω–µ–º—É –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–µ—Ä–∏—Ç–µ—Å—å —Å —ç—Ç–∏–º. –ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ!",
    "personal_data_channel_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∏–Ω–Ω—ã—Ö –ª—é–¥–µ–π. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - {channel}, –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - {link_for_channel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.",
    "flaying_channel_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –∂–µ—Å—Ç–æ–∫–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - {channel}, –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - {link_for_channel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.",
    "cp_channel_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—é —Å —É—á–∞—Å—Ç–∏–µ–º –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - {channel}, –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - {link_for_channel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.",
    "price_channel_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä Telegram. –•–æ—á—É –≤–∞–º –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–µ—Ç —É—Å–ª—É–≥–∏ –¥–æ–∫—Å–∏–Ω–≥–∞ –∏ —Å–≤–∞—Ç—Ç–∏–Ω–≥–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª: {channel} –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {link_for_channel} –ü—Ä–æ—Å—å–±–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.",
    "pornography_channel_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –Ω–∞—à–µ–ª –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - {channel}, –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - {link_for_channel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
    "violence_channel_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –Ω–∞—à–µ–ª –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–∞—Å–∏–ª–∏–µ –∏–ª–∏ –∂–µ—Å—Ç–æ–∫–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - {channel}, –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - {link_for_channel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
    "osint_bot_en": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –ª–∏—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ - {username_bot}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–µ—Ä–∏—Ç–µ—Å—å –∏ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞."
    }

    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–æ–∫ —Å —ç–º–æ–¥–∑–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ REPORT_TEXTS // Matching strings with emoji and other values ‚Äã‚Äãfor keys in REPORT_TEXTS
    reason_map = {
        "üö´ –°–ø–∞–º": "spam_user",
        "üîí –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ": "personal_data_user",
        "üòà –¢—Ä–æ–ª–ª–∏–Ω–≥": "trolling_user",
        "üóëÔ∏è –°–Ω–æ—Å —Å–µ—Å—Å–∏–π": "delete_sessions_user",
        "üíé –ü—Ä–µ–º–∏—É–º": "premium_user",
        "üåê –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä": "virtual_number_user",
        "üîê –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –¢–ì–ö": "personal_data_channel",
        "üêæ –ñ–∏–≤–æ–¥–µ—Ä—Å—Ç–≤–æ": "flaying_channel",
        "üö´ –¶–ü": "cp_channel",
        "üìú –ü—Ä–∞–π—Å-–ª–∏—Å—Ç (DOX & SWAT)": "price_channel",
        "üîû –ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è (18+)": "pornography_channel",
        "ü©∏ –ù–∞—Å–∏–ª–∏–µ": "violence_channel",
        "üïµÔ∏è‚Äç‚ôÇÔ∏è –û—Å–∏–Ω—Ç –±–æ—Ç": "osint_bot",
        "üìÖ 7 –¥–Ω–µ–π (70‚ÇΩ)": "7",
        "üìÖ 14 –¥–Ω–µ–π (140‚ÇΩ)": "14",
        "üìÖ 30 –¥–Ω–µ–π (210‚ÇΩ)": "30",
        "üìÖ 60 –¥–Ω–µ–π (420‚ÇΩ)": "60",

        "üö´ Spam": "spam_user_en",
        "üîí Personal data": "personal_data_user_en",
        "üòà Trolling": "trolling_user_en",
        "üóëÔ∏è Delete sessions": "delete_sessions_user_en",
        "üíé Premium": "premium_user_en",
        "üåê Virtual number": "virtual_number_user_en",
        "üîê Personal data in channel": "personal_data_channel_en",
        "üêæ Animal cruelty": "animal_cruelty_channel_en",
        "üö´ CP": "cp_channel_en",
        "üìú Price-list (DOX & SWAT)": "price_channel_en",
        "üîû Pornography (18+)": "pornography_channel_en",
        "ü©∏ Violence": "violence_channel_en",
        "üïµÔ∏è‚Äç‚ôÇÔ∏è Osint bot": "osint_bot_en",
        "üìÖ 7 days (70‚ÇΩ)": "7",
        "üìÖ 14 days (140‚ÇΩ)": "14",
        "üìÖ 30 days (210‚ÇΩ)": "30",
        "üìÖ 60 days (420‚ÇΩ)": "60"
    }

    # –ü—Ä–∏–º–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—á—Ç—ã: // Example for adding mail:
    
    # accounts = {
    #     'mail1@gmail.com': {
    #         'password': 'pass1',
    #         'smtp_server': 'smtp.gmail.com',
    #         'smtp_port': 465
    #     },
    #     'mail2@gmail.com': {
    #         'password': 'pass2',
    #         'smtp_server': 'smtp.gmail.com',
    #         'smtp_port': 465
    #     },
    #     'mail3@gmail.com': {
    #         'password': 'pass3',
    #         'smtp_server': 'smtp.gmail.com',
    #         'smtp_port': 465
    #     },
    #     # –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ—á—Ç // Continue adding data for other mails
    # }

    accounts = {
        'mail1@gmail.com': {
            'password': 'pass1',
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 465
        },
        'mail2@gmail.com': {
            'password': 'pass2',
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 465
        },
        'mail3@gmail.com': {
            'password': 'pass3',
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 465
        }
    }

    async def send_email(account_email, recipient, subject, body):
        account_info = accounts.get(account_email)
        if not account_info:
            raise ValueError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è {account_email} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        password = account_info["password"]
        smtp_server = account_info["smtp_server"]
        smtp_port = account_info["smtp_port"]

        message = MIMEMultipart()
        message["From"] = account_email
        message["To"] = recipient
        message["Subject"] = subject
        message.attach(MIMEText(body, "plain"))

        async with SMTP(hostname=smtp_server, port=smtp_port, use_tls=True) as smtp:
            await smtp.login(account_email, password)
            await smtp.send_message(message)

    async def distribute_emails(callback: CallbackQuery, reason, data):
        global stop_mailing
        stop_mailing = False

        for account_email in accounts.keys():
            if stop_mailing:
                break

            for recipient in mailing_list:
                if stop_mailing:
                    break

                text = REPORT_TEXTS[reason].format(**data)
                subject = "–ñ–∞–ª–æ–±–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

                try:
                    await send_email(account_email, recipient, subject, text)

                    if user_language == "ru":
                        await callback.message.answer(
                            f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å {account_email} –Ω–∞ {recipient}",
                            parse_mode="HTML",
                            reply_markup=kb.stop)
                        
                    elif user_language == "en":
                        await callback.message.answer(
                            f"Email sent from {account_email} to {recipient}",
                            parse_mode="HTML",
                            reply_markup=kb.stop_en)

                except Exception as e:
                    from html import escape

                    if user_language == "ru":
                        await callback.message.answer(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å {account_email} –Ω–∞ {recipient}: {escape(str(e))}",
                            parse_mode="HTML",
                            reply_markup=kb.stop)
                        
                    if user_language == "en":
                        await callback.message.answer(
                            f"‚ùå Failed to send email from {account_email} to {recipient}: {escape(str(e))}",
                            parse_mode="HTML",
                            reply_markup=kb.stop_en)                              

                    await asyncio.sleep(DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ // Delay between shipments

    if callback.data == "confirm_mailing_yes":

        if user_language == "ru":
            await callback.message.answer(
                "<b>‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞!</b>",
                parse_mode="HTML",
                reply_markup=kb.stop)
        
        elif user_language == "en":
            await callback.message.answer(
                "<b>‚úÖ Sending complaints started successfully!</b>",
                parse_mode="HTML",
                reply_markup=kb.stop_en)

        reason = reason_map.get(reason, reason)

        await distribute_emails(callback, reason, data)

        await state.clear()

    elif callback.data == "confirm_mailing_no":

        if user_language == "ru":
            await callback.message.answer(
                "<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.</b>",
                parse_mode="HTML",
                reply_markup=kb.start)
            
            await state.clear()

        elif user_language == "en":
            await callback.message.answer(
                "<b>‚ùå You have canceled the process. Use the button below to start again.</b>",
                    parse_mode="HTML",
                    reply_markup=kb.start_en)
                        
            await state.clear()

@router.callback_query(F.data == "cancel")
async def cancel(callback: CallbackQuery, state: FSMContext):

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>‚ùå –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>",
            parse_mode="HTML",
            reply_markup=kb.menu)
        
        await state.clear()
    
    elif user_language == "en":
        await callback.message.answer(
            "<b>‚ùå The action was successfully cancelled.</b>",
            parse_mode="HTML",
            reply_markup=kb.menu_en)
        
        await state.clear()

@router.callback_query(F.data == "stop")
async def stop(callback: CallbackQuery):

    await callback.answer()

    global stop_mailing
    stop_mailing = True

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>‚õî –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</b>",
            parse_mode="HTML",
            reply_markup=kb.repeat)
        
    elif user_language == "en":
        await callback.message.answer(
            "<b>‚õîÔ∏è Mailing stopped successfully.</b>",
            parse_mode="HTML",
            reply_markup=kb.repeat_en)
    
@router.callback_query(F.data == "profile")
async def profile(callback: CallbackQuery):

    await callback.answer()

    user_id = callback.from_user.id

    user_info = await get_user_info(callback.from_user.id)

    if user_info:
        user_id, registration_date, balance, subscription_date = user_info

    subscription_datetime = await get_subscription_datetime(user_id)
    
    current_timestamp = int(time.time())
    
    user_language = await get_user_language(user_id)

    if subscription_datetime > current_timestamp:
        subscription_date = datetime.fromtimestamp(subscription_datetime).strftime('%d.%m.%Y %H:%M:%S')
    
        if user_language == "ru":
            subscription_text = f"<b>üíé –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ</b> {subscription_date}"
        elif user_language == "en":
            subscription_text = f"<b>üíé Active until</b> {subscription_date}"

    elif user_id in ADMINS:
        if user_language == "ru":
            subscription_text = "<b>üíé –ê–∫—Ç–∏–≤–Ω–∞</b>"
        elif user_language == "en":
            subscription_text = "<b>üíé Active</b>"
    else:
        if user_language == "ru":
            subscription_text = "<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>"
        elif user_language == "en":
            subscription_text = "<b>‚ùå Missing</b>"

    if user_language == "ru":
        await callback.message.answer(
            "<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"<b>üÜî –í–∞—à Telegram ID:</b> <code>{user_id}</code>\n"
            f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}\n"
            f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {balance} ‚ÇΩ\n"
            f"<b>üåü –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_text}\n",
            parse_mode="HTML",
            reply_markup=kb.profile)

    elif user_language == "en":
        await callback.message.answer(
            "<b>üë§ Your Profile:</b>\n\n"
            f"<b>üÜî Your Telegram ID:</b> <code>{user_id}</code>\n"
            f"<b>üìÖ Registration Date:</b> {registration_date}\n"
            f"<b>üí∞ Balance:</b> {balance} ‚ÇΩ\n"
            f"<b>üåü Subscription Status:</b> {subscription_text}\n",
            parse_mode="HTML",
            reply_markup=kb.profile_en)

class SubscriptionBuy(StatesGroup):
    subscription_duration = State()
    pay = State()
    confirm = State()

@router.callback_query(F.data == "subscription_buy")
async def subscription_buy(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    subscription_datetime = await get_subscription_datetime(user_id)
    
    current_timestamp = int(time.time())

    if subscription_datetime > current_timestamp or user_id in ADMINS:

        if user_language == "ru":
            await callback.message.answer(
                "<b>‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
                parse_mode="HTML",
                reply_markup=kb.menu)
        elif user_language == "en":
            await callback.message.answer(
                "<b>‚ùå You already have an active subscription. Please try again later.</b>",
                parse_mode="HTML",
                reply_markup=kb.menu_en)
    else:
        if user_language == "ru":
            await callback.message.answer(
                "<b>üíé –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!</b>\n\n"
                "<b>‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b>",
                parse_mode="HTML",
                reply_markup=kb.subscription_duration)

            await state.set_state(SubscriptionBuy.subscription_duration)

        elif user_language == "en":
            await callback.message.answer(
                "<b>üíé Subscribe now and start using all the bot's features today!</b>\n\n"
                "<b>‚è≥ Choose the subscription duration:</b>",
                parse_mode="HTML",
                reply_markup=kb.subscription_duration_en)

            await state.set_state(SubscriptionBuy.subscription_duration)

@router.callback_query(SubscriptionBuy.subscription_duration)
async def subscription_duration(callback: CallbackQuery, state: FSMContext):

    callback_data = callback.data

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    try:
        duration = callback_data.split("|")[0]
    except IndexError:
        if user_language == "ru":
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â–µ —Ä–∞–∑.")
            return
        elif user_language == "en":
            await callback.answer("‚ùå An error occurred. Please select the subscription duration again.")
            return

    if duration == "7":
        price = "70"
    elif duration == "14":
        price = "140"
    elif duration == "30":
        price = "210"
    elif duration == "60":
        price = "420"
    else:
        if user_language == "ru":
            price = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞"
        elif user_language == "en":
            price = "‚ùå Unknown amount"

    await state.update_data(duration=duration, price=price)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"<b>‚è≥ –°—Ä–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {duration} –¥–Ω–µ–π</b>\n"
            f"<b>üí∞ –°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {price} ‚ÇΩ\n\n"
            "<b>üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.</b>",
            parse_mode="HTML",
            reply_markup=kb.pay)
        
        await state.set_state(SubscriptionBuy.pay)
    
    elif user_language == "en":
        await callback.message.answer(
            "<b>üîç Please check the entered details:</b>\n\n"
            f"<b>‚è≥ Subscription duration: {duration} days</b>\n"
            f"<b>üí∞ Payment amount:</b> {price} ‚ÇΩ\n\n"
            "<b>üëá Click the button below to pay. After that, confirm the transaction.</b>",
            parse_mode="HTML",
            reply_markup=kb.pay_en)

        await state.set_state(SubscriptionBuy.pay)

@router.callback_query(SubscriptionBuy.pay)
async def pay(callback: CallbackQuery, state: FSMContext):

    data = await state.get_data()

    price = data.get('price')

    user_id = callback.from_user.id
    user_info = await get_user_info(user_id)
    _, _, balance, _ = user_info

    new_balance = int(balance) - int(price)

    user_language = await get_user_language(user_id)

    await state.update_data(user_id=user_id, new_balance=new_balance, balance=balance, price=price)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üìù –î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã:</b>\n\n"
            f"<b>üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {balance} ‚ÇΩ\n"
            f"<b>üìâ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b> {new_balance} ‚ÇΩ\n"
            f"<b>üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {price} ‚ÇΩ\n\n"
            "<b>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É?</b>",
            parse_mode="HTML",
            reply_markup=kb.confirm_pay_yes_no)

        await state.set_state(SubscriptionBuy.confirm)

    elif user_language == "en":
        await callback.message.answer(
            "<b>üìù Payment details:</b>\n\n"
            f"<b>üí∞ Your current balance:</b> {balance} ‚ÇΩ\n"
            f"<b>üìâ Balance after payment:</b> {new_balance} ‚ÇΩ\n"
            f"<b>üíµ Amount to pay:</b> {price} ‚ÇΩ\n\n"
            "<b>‚úÖ Confirm payment?</b>",
            parse_mode="HTML",
            reply_markup=kb.confirm_pay_yes_no_en)

        await state.set_state(SubscriptionBuy.confirm)

@router.callback_query(SubscriptionBuy.confirm)
async def confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    duration = data.get('duration')
    new_balance = data.get('new_balance')
    balance = data.get('balance')
    price = data.get('price')

    my_user_id = callback.from_user.id

    user_language = await get_user_language(my_user_id)

    if callback.data == "confirm_pay_yes":
        if int(balance) >= int(price):
            duration_in_seconds = int(duration) * 86400
            current_timestamp = int(time.time())
            duration_result = duration_in_seconds + int(current_timestamp)

            await subtract_balance(new_balance, user_id)
            await add_subscription(duration_result, user_id)

            if user_language == "ru":
                await callback.message.answer(
                    f"<b>‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"<b>üÜî –í–∞—à ID:</b> {user_id}\n"
                    f"<b>‚è≥ –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {duration} –¥–Ω–µ–π</b>\n"
                    f"<b>üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {new_balance} ‚ÇΩ\n\n"
                    "<b>üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏. üòä</b>",
                    parse_mode="HTML",
                    reply_markup=kb.menu)
            elif user_language == "en":
                await callback.message.answer(
                    f"<b>‚úÖ Payment successfully completed!</b>\n\n"
                    f"<b>üÜî Your ID:</b> {user_id}\n"
                    f"<b>‚è≥ Subscription duration: {duration} days</b>\n"
                    f"<b>üí∞ New balance:</b> {new_balance} ‚ÇΩ\n\n"
                    "<b>üéâ Thank you for your payment! Your subscription is now active. If you have any questions, our support is always available. üòä</b>",
                    parse_mode="HTML",
                    reply_markup=kb.menu_en)
        else:
            if user_language == "ru":
                await callback.message.answer(
                    "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n\n"
                    "<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.</b> üí∏\n"
                    "<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.</b> üí≥",
                    parse_mode="HTML",
                    reply_markup=kb.menu)
                
            elif user_language == "en":
                await callback.message.answer(
                    "<b>‚ùå Error!</b>\n\n"
                    "<b>You do not have enough funds in your balance to complete the payment.</b> üí∏\n"
                    "<b>Please try adding funds to your balance and try again.</b> üí≥",
                    parse_mode="HTML",
                    reply_markup=kb.menu_en)

    elif callback.data == "confirm_pay_no":
        if user_language == "ru":
            await callback.message.answer(
                "<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.</b>",
                parse_mode="HTML",
                reply_markup=kb.menu)

            await state.clear()
        
        elif user_language == "en":
            await callback.message.answer(
                "<b>‚ùå You have canceled the process. Use the button below to start over.</b>",
                parse_mode="HTML",
                reply_markup=kb.menu_en)

            await state.clear()

@router.callback_query(F.data == "admin_panel")
async def admin_panel(callback: CallbackQuery):

    await callback.answer()

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å!</b>",
            parse_mode="HTML",
            reply_markup=kb.admin_panel)
        
    elif user_language == "en":
        await callback.message.answer(
            "<b>üíº Welcome to the Admin-Panel!</b>",
            parse_mode="HTML",
            reply_markup=kb.admin_panel_en)

class UserManagement(StatesGroup):
    user_id = State()
    action = State()
    duration = State()
    confirm = State()
    amount_new_balance = State()

@router.callback_query(F.data == "user_management")
async def user_management(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel)

        await state.set_state(UserManagement.user_id)
    
    elif user_language == "en":
        await callback.message.answer(
            "<b>üîç Enter the user ID:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel)

        await state.set_state(UserManagement.user_id)

@router.message(UserManagement.user_id)
async def get_user_id(message: Message, state: FSMContext):

    user_id = message.text

    my_user_id = message.from_user.id

    user_language = await get_user_language(my_user_id)    

    await state.update_data(user_id=user_id)

    if not await user_exists(user_id):
            
            if user_language == "ru":
                await message.answer(
                    "<b>üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–æ–∑–º–æ–∂–Ω–æ, ID —É–∫–∞–∑–∞–Ω —Å –æ—à–∏–±–∫–æ–π.</b>",
                    parse_mode="HTML",
                    reply_markup=kb.menu)
                
            elif user_language == "en":
                await message.answer(
                    "<b>üö´ User not found! The ID might be incorrect.</b>",
                    parse_mode="HTML",
                    reply_markup=kb.menu_en)
    else:
        if user_language == "ru":

            await message.answer(
                f"<b>üë§ –í–≤–µ–¥–µ–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>\n\n"
                "<b>üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
                parse_mode="HTML",
                reply_markup=kb.user_management)

            await state.set_state(UserManagement.action)

        elif user_language == "en":
            await message.answer(
                f"<b>üë§ Entered user ID:</b> <code>{user_id}</code>\n\n"
                "<b>üõ†Ô∏è Choose an action:</b>",
                parse_mode="HTML",
                reply_markup=kb.user_management_en)

            await state.set_state(UserManagement.action)

@router.callback_query(UserManagement.action)
async def action(callback: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    user_id = data.get('user_id')
    action = callback.data.split("|")[1]

    await state.update_data(action=action)

    my_user_id = callback.from_user.id

    user_language = await get_user_language(my_user_id)

    if action == "üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" or action == "üéÅ Give a subscription":
        if user_language == "ru":
            await callback.message.answer(
                "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
                "üî¢ <b>–ù–∞–ø—Ä–∏–º–µ—Ä: 7, 30 –∏–ª–∏ 365.</b>",
            parse_mode="HTML")
            
            await state.set_state(UserManagement.duration)
        
        elif user_language == "en":
            await callback.message.answer(
                "üìÖ <b>Enter the number of days for the subscription:</b>\n"
                "üî¢ <b>For example: 7, 30, or 365.</b>",
                parse_mode="HTML")

            await state.set_state(UserManagement.duration)

    if action == "üí∏ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" or action == "üí∏ Change balance":
        user_info = await get_user_info(user_id)
        _, _, balance, _ = user_info

        await state.update_data(balance=balance)

        if user_language == "ru":
            await callback.message.answer(
                f"<b>üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id} - {balance} ‚ÇΩ</b>\n\n"
                "<b>üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b>",
                parse_mode="HTML",
                reply_markup=kb.cancel)
            
            await state.set_state(UserManagement.amount_new_balance)

        elif user_language == "en":
            await callback.message.answer(
                f"<b>üí∞ Current balance of the user with ID: {user_id} - {balance} ‚ÇΩ</b>\n\n"
                "<b>üí∏ Enter the new balance:</b>",
                parse_mode="HTML",
                reply_markup=kb.cancel_en)

            await state.set_state(UserManagement.amount_new_balance)

@router.message(UserManagement.amount_new_balance)
async def get_amount_new_balance(message: Message, state: FSMContext):
    try:
        amount_new_balance = int(message.text)

        if amount_new_balance >= 0:
            await state.update_data(amount_new_balance=amount_new_balance)

            data = await state.get_data()
            user_id = data.get('user_id')
            action = data.get('action')

            my_user_id = message.from_user.id

            user_language = await get_user_language(my_user_id)

            if user_language == "ru":
                await message.answer(
                    "<b>üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
                    f"<b>üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>\n"
                    f"<b>üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ:</b> {action}\n"
                    f"<b>üí∏ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {amount_new_balance} ‚ÇΩ\n\n"
                    "<b>‚û°Ô∏è –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>",
                    parse_mode="HTML",
                    reply_markup=kb.confirm_change_balance_yes_no)
                
                await state.set_state(UserManagement.confirm)

            elif user_language == "en":
                await message.answer(
                    "<b>üîç Please check the entered data:</b>\n\n"
                    f"<b>üÜî User ID:</b> <code>{user_id}</code>\n"
                    f"<b>üõ†Ô∏è Action:</b> {action}\n"
                    f"<b>üí∏ Updated user balance:</b> {amount_new_balance} ‚ÇΩ\n\n"
                    "<b>‚û°Ô∏è Do you want to continue?</b>",
                    parse_mode="HTML",
                    reply_markup=kb.confirm_change_balance_yes_no_en)

                await state.set_state(UserManagement.confirm)
        else:
            if user_language == "ru":
                await message.reply("<b>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è.</b>", parse_mode="HTML")
            elif user_language == "en":
                await message.reply("<b>‚ö†Ô∏è Please enter a whole number greater than or equal to zero.</b>", parse_mode="HTML")
    except ValueError:
        if user_language == "ru":
            await message.reply("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>", parse_mode="HTML")
        elif user_language == "en":
            await message.reply("<b>‚ùå Please enter a valid whole number.</b>", parse_mode="HTML")

@router.message(UserManagement.duration)
async def duration(message: Message, state: FSMContext):

    my_user_id = message.from_user.id
    user_language = await get_user_language(my_user_id)

    try:
        duration = int(message.text)

        if duration > 0:
            await state.update_data(duration=duration)

            data = await state.get_data()
            user_id = data.get('user_id')
            action = data.get('action')

            def days_declension(n, user_language):
                if user_language == "ru":

                    if 11 <= n % 100 <= 19:
                        return f"{n} –¥–Ω–µ–π"
                    last_digit = n % 10
                    if last_digit == 1:
                        return f"{n} –¥–µ–Ω—å"
                    elif 2 <= last_digit <= 4:
                        return f"{n} –¥–Ω—è"
                    else:
                        return f"{n} –¥–Ω–µ–π"
                elif user_language == "en":

                    if n == 1:
                        return f"{n} day"
                    else:
                        return f"{n} days"

            duration_text = days_declension(duration, user_language)

            if user_language == "ru":
                await message.answer(
                    "<b>üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
                    f"<b>üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>\n"
                    f"<b>üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ:</b> {action}\n"
                    f"<b>‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {duration_text}\n\n"
                    "<b>‚û°Ô∏è –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>",
                    parse_mode="HTML",
                    reply_markup=kb.confirm_gift_a_sub_yes_no)

                await state.set_state(UserManagement.confirm)

            elif user_language == "en":
                await message.answer(
                    "<b>üîç Please check the entered data:</b>\n\n"
                    f"<b>üÜî User ID:</b> <code>{user_id}</code>\n"
                    f"<b>üõ†Ô∏è Action:</b> {action}\n"
                    f"<b>‚åõ Subscription duration:</b> {duration_text}\n\n"
                    "<b>‚û°Ô∏è Do you want to continue?</b>",
                    parse_mode="HTML",
                    reply_markup=kb.confirm_gift_a_sub_yes_no_en)

                await state.set_state(UserManagement.confirm)
        else:
            if user_language == "ru":
                await message.reply("<b>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>", parse_mode="HTML")
            elif user_language == "en":
                await message.reply("<b>‚ö†Ô∏è Please enter a positive integer.</b>", parse_mode="HTML")
    except ValueError:
        if user_language == "ru":
            await message.reply("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>", parse_mode="HTML")
        elif user_language == "en":
            await message.reply("<b>‚ùå Please enter a valid integer.</b>", parse_mode="HTML")

@router.callback_query(UserManagement.confirm)
async def confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    duration = data.get('duration')
    balance = data.get('balance')
    amount_new_balance = data.get('amount_new_balance')

    my_user_id = callback.from_user.id

    user_language = await get_user_language(my_user_id)

    if callback.data == "confirm_gift_a_sub_yes":

        duration_in_seconds = duration * 86400
        current_timestamp = int(time.time())
        new_subscription_end = duration_in_seconds + current_timestamp

        current_subscription = await get_subscription_datetime(user_id)

        current_sub_date = datetime.fromtimestamp(current_subscription).strftime('%d.%m.%Y %H:%M:%S')

        if new_subscription_end <= current_subscription:
            if user_language == "ru":
                await callback.message.answer(
                    f"<b>‚ö† –û—à–∏–±–∫–∞:</b> –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ–ª—å—à–∏–π –∏–ª–∏ —Ä–∞–≤–Ω—ã–π —Å—Ä–æ–∫!\n\n"
                    f"<b>üìÖ –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> <code>{current_sub_date}</code>\n"
                    f"<i>‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å –±–æ–ª—å—à–∏–º —Å—Ä–æ–∫–æ–º.</i>",
                    parse_mode="HTML",
                    reply_markup=kb.menu)
                return
        
            elif user_language == "en":
                await callback.message.answer(
                    f"<b>‚ö† Error:</b> The user already has a subscription with an equal or longer duration!\n\n"
                    f"<b>üìÖ Current subscription active until:</b> <code>{current_sub_date}</code>\n"
                    f"<i>‚è≥ Try gifting a subscription with a longer duration.</i>",
                    parse_mode="HTML",
                    reply_markup=kb.menu_en)
                return

        await add_subscription(new_subscription_end, user_id)

        if user_language == "ru":
            await callback.message.answer(
                "<b>üéÅ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–µ–Ω–∞!‚ú®</b>\n\n"
                f"<i>‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration} –¥–Ω–µ–π.</i>",
                parse_mode="HTML",
                reply_markup=kb.menu)
        
        elif user_language == "en":
            await callback.message.answer(
                "<b>üéÅ Subscription successfully gifted!‚ú®</b>\n\n"
                f"<i>‚åõ Duration: {duration} days.</i>",
                parse_mode="HTML",
                reply_markup=kb.menu_en)

    elif callback.data == "confirm_gift_a_sub_no":
        if user_language == "ru":
            await callback.message.answer(
                "<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.</b>",
                parse_mode="HTML",
                reply_markup=kb.menu)

            await state.clear()
        
        elif user_language == "en":
            await callback.message.answer(
                "<b>‚ùå You have cancelled the process. Use the button below to start over.</b>",
                parse_mode="HTML",
                reply_markup=kb.menu_en)

            await state.clear() 

    if callback.data == "confirm_change_balance_yes":

        await change_balance(amount_new_balance, user_id)

        if user_language == "ru":

            await callback.message.answer(
                "<b>üîÑ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
                f"<b>üìä –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å:</b> {balance} ‚ÇΩ\n"
                f"<b>üÜï –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {amount_new_balance} ‚ÇΩ\n\n"
                "<b>‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã.</b>",
                parse_mode="HTML",
                reply_markup=kb.menu)
        
        elif user_language == "en":
            await callback.message.answer(
                "<b>üîÑ User's balance has been successfully updated!</b>\n\n"
                f"<b>üìä Old balance:</b> {balance} ‚ÇΩ\n"
                f"<b>üÜï New balance:</b> {amount_new_balance} ‚ÇΩ\n\n"
                "<b>‚úÖ All changes have been successfully applied.</b>",
                parse_mode="HTML",
                reply_markup=kb.menu_en)
            
    elif callback.data == "confirm_change_balance_no":
        if user_language == "ru":
            await callback.message.answer(
                "<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.</b>",
                parse_mode="HTML",
                reply_markup=kb.menu)

            await state.clear()
        
        elif user_language == "en":
            await callback.message.answer(
                "<b>‚ùå You have canceled the process. Use the button below to start over.</b>",
                parse_mode="HTML",
                reply_markup=kb.menu_en)

            await state.clear()

class AddBalance(StatesGroup):
    payment_system = State()
    amount = State()
    confirm = State()

@router.callback_query(F.data == "add_balance")
async def add_balance(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    if user_language == "ru":
        await callback.message.answer(
            "<b>üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:</b>",
            parse_mode="HTML",
            reply_markup=kb.payment_systems)

        await state.set_state(AddBalance.payment_system)
    
    elif user_language == "en":
        await callback.message.answer(
            "<b>üí∏ Choose a payment system:</b>",
            parse_mode="HTML",
            reply_markup=kb.payment_systems)

        await state.set_state(AddBalance.payment_system)

@router.callback_query(AddBalance.payment_system)
async def get_payment_system(callback: CallbackQuery, state: FSMContext):
    
    payment_system = callback.data.split("|")[1]

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    await state.update_data(payment_system=payment_system)

    if user_language == "ru":
        await callback.message.answer(
            f"<b>üí∏ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–±—Ä–∞–ª–∏: {payment_system}</b>\n\n"
            "<b>üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel)
        
        await state.set_state(AddBalance.amount)
    
    elif user_language == "en":
        await callback.message.answer(
            f"<b>üí∏ The payment system you selected: {payment_system}</b>\n\n"
            "<b>üí∞ Now, please enter the amount to top up:</b>",
            parse_mode="HTML",
            reply_markup=kb.cancel)

        await state.set_state(AddBalance.amount)

@router.message(AddBalance.amount)
async def enter_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)

        data = await state.get_data()

        payment_system = data.get('payment_system')

        user_id = message.from_user.id

        user_language = await get_user_language(user_id)

        if int(amount) > 0:
            await state.update_data(amount=amount)

            if user_language == "ru":
                await message.answer(
                    "<b>üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
                    f"<b>üí∏ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {payment_system}</b>\n"
                    f"<b>üí∞ –°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} ‚ÇΩ</b>\n\n"
                    "<b>‚û°Ô∏è –í—Å–µ —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ?</b>",
                    parse_mode="HTML",
                    reply_markup=kb.confirm_add_balance_yes_no)
                
                await state.set_state(AddBalance.confirm)
            
            elif user_language == "en":
                await message.answer(
                    "<b>üîç Please check the entered details:</b>\n\n"
                    f"<b>üí∏ Payment system: {payment_system}</b>\n"
                    f"<b>üí∞ Amount to top up: {amount} ‚ÇΩ</b>\n\n"
                    "<b>‚û°Ô∏è Is everything correct?</b>",
                    parse_mode="HTML",
                    reply_markup=kb.confirm_add_balance_yes_no_en)

                await state.set_state(AddBalance.confirm)
        else:
            if user_language == "ru":
                await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            elif user_language == "en":
                await message.reply("‚ö†Ô∏è Please enter only an even positive number.")
    except ValueError:
        if user_language == "ru":
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        elif user_language == "en":
            await message.reply("‚ùå Please enter a valid amount in rubles (a positive whole number).")

@router.callback_query(F.data.startswith("CHECK|"))
async def check_invoice(callback: CallbackQuery, state: FSMContext):

    await callback.answer()

    data = await state.get_data()

    amount = data.get('amount')
    payment_id = data.get('payment_id')
    invoice_id = int(callback.data.split("|")[1])

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    try:
        invoice = await acp.get_invoices(invoice_ids=invoice_id)

    except Exception as e:
        if user_language == "ru":
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞: {str(e)}")
            return
        elif user_language == "en":
            await callback.answer(f"‚ùå Error while retrieving the account status: {str(e)}")
            return

    if invoice.status == "paid":
        if await check_balance_updated(invoice_id):
            if user_language == "ru":
                await callback.message.answer("‚úÖ –ë–∞–ª–∞–Ω—Å —É–∂–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.")
                return
            elif user_language == "en":
                await callback.message.answer("‚úÖ The balance has already been updated earlier.")
                return
            
        if user_language == "ru":
            await callback.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        elif user_language == "en":
            await callback.answer("‚úÖ Check completed: payment status confirmed.")

        user_info = await get_user_info(user_id)
        _, _, balance, _ = user_info
        new_balance = int(balance) + int(amount)

        invoice_status = invoice.status

        await update_invoice_status(invoice_status, invoice_id)

        await balance_updated(invoice_id)

        await top_up_balance(new_balance, user_id)

        if user_language == "ru":
            await callback.message.answer(
                f"<b>üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"<b>üí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {amount} ‚ÇΩ\n"
                f"<b>üÜî ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>\n\n"
                f"<b>üîÑ –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω. üòÑ</b>",
                parse_mode="HTML",
                reply_markup=kb.menu)
        
        elif user_language == "en":
            await callback.message.answer(
                f"<b>üéâ Balance top-up successful!</b>\n\n"
                f"<b>üí∏ Top-up amount:</b> {amount} ‚ÇΩ\n"
                f"<b>üÜî Payment ID:</b> <code>{payment_id}</code>\n\n"
                f"<b>üîÑ Your balance has been updated. üòÑ</b>",
                parse_mode="HTML",
                reply_markup=kb.menu_en)

    elif invoice.status == 'expired':
        if user_language == "ru":
            await callback.answer("‚ùå –°—á–µ—Ç –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
        elif user_language == "en":
            await callback.answer("‚ùå The account has expired. Please create a new one.")
    else:
        if user_language == "ru":
            await callback.answer("‚ùå –°—á–µ—Ç –ø–æ–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∂–µ.")
        elif user_language == "en":
            await callback.answer("‚ùå The account has not been paid yet. Please check again later.")

@router.callback_query(AddBalance.confirm)
async def confirm(callback: CallbackQuery, state: FSMContext):

    user_id = callback.from_user.id

    user_language = await get_user_language(user_id)

    try:
        data = await state.get_data()

        payment_system = data.get('payment_system')
        amount = data.get('amount')

        if callback.data == "confirm_add_balance_yes":

            if user_language == "ru":
                description = f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} ‚ÇΩ üíµ'
            elif user_language == "en":
                description = f'Balance top-up of {amount} ‚ÇΩ üíµ'

            invoice = await acp.create_invoice(
                currency_type='fiat',
                asset='USDT',
                fiat='RUB',
                amount=amount,
                description=description
            )

            invoice_id = invoice.invoice_id
            invoice_status = invoice.status

            payment_id = str(uuid.uuid4())
            payment_amount = int(amount)
            payment_date = datetime.now().strftime('%d.%m.%Y %H:%M:%S')

            await log_payment(user_id, invoice_id, invoice_status, payment_id, payment_amount, payment_date)

            await state.update_data(invoice_id=invoice.invoice_id, payment_id=payment_id, amount=amount)

            if user_language == "ru":

                pay_button = InlineKeyboardButton(text="üíµ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice.bot_invoice_url)
                payment_confirm_button = InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"CHECK|{invoice.invoice_id}")
                pay_markup = InlineKeyboardMarkup(inline_keyboard=[[pay_button], [payment_confirm_button]])

            elif user_language == "en":

                pay_button = InlineKeyboardButton(text="üíµ Pay", url=invoice.bot_invoice_url)
                payment_confirm_button = InlineKeyboardButton(text="‚úÖ Check Payment", callback_data=f"CHECK|{invoice.invoice_id}")
                pay_markup = InlineKeyboardMarkup(inline_keyboard=[[pay_button], [payment_confirm_button]])

            if user_language == "ru":
                await callback.message.answer(
                    f"<b>üè¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏:</b>\n\n"
                    f"<i>üîπ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</i> <b>{payment_system}</b>\n"
                    f"<i>üîπ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</i> <b>{amount} ‚ÇΩ</b>\n"
                    f"<i>üîπ ID –ø–ª–∞—Ç–µ–∂–∞:</i> <b><code>{payment_id}</code></b>\n\n"
                    "<i>üîª –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É:</i>",
                    parse_mode="HTML",
                    reply_markup=pay_markup)

            elif user_language == "en":
                await callback.message.answer(
                    f"<b>üè¶ Top-up Information:</b>\n\n"
                    f"<i>üîπ Payment system:</i> <b>{payment_system}</b>\n"
                    f"<i>üîπ Amount to pay:</i> <b>{amount} ‚ÇΩ</b>\n"
                    f"<i>üîπ Payment ID:</i> <b><code>{payment_id}</code></b>\n\n"
                    "<i>üîª To complete the operation, press the button below to make the payment:</i>",
                    parse_mode="HTML",
                    reply_markup=pay_markup)

            elif callback.data == "confirm_add_balance_no":
                if user_language == "ru":
                    await callback.message.answer(
                        "<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å.</b>\n"
                        "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</i>",
                        parse_mode="HTML",
                        reply_markup=kb.menu)
                    await state.clear()

                elif user_language == "en":
                    await callback.message.answer(
                        "<b>‚ùå You have canceled the process.</b>\n"
                        "<i>Use the button below to open the main menu.</i>",
                        parse_mode="HTML",
                        reply_markup=kb.menu)
                    await state.clear()

    except Exception as e:
        if user_language == "ru":
            await callback.message.answer("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>", parse_mode="HTML")
        elif user_language == "en":
            await callback.message.answer("<b>‚ùå An error occurred while creating the invoice. Please try again.</b>", parse_mode="HTML")

